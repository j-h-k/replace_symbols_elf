sighandler_t signal(int signum, sighandler_t handler);
int sigaction(int signum, const struct sigaction *  act, struct sigaction *  oldact);
int rt_sigaction(int signum, const struct sigaction *  act, struct sigaction *  oldact);
int sigvec(int signum, const struct sigvec *  vec, struct sigvec *  ovec);
int sigblock(int mask);
int sigsetmask(int mask);
int siggetmask(void);
int sigprocmask(int how, const sigset_t *  set, sigset_t *  oldset);
int rt_sigprocmask(int how, const sigset_t *  set, sigset_t *  oldset);
int sigsuspend(const sigset_t *  mask);
int sighold(int sig);
int sigignore(int sig);
int sigrelse(int sig);
int __sigpause(int __sig_or_mask, int __is_sig);
int sigpause(int sig);
int pthread_sigmask(int how, const sigset_t *  set, sigset_t *  oldmask);
int sigwait(const sigset_t *  set, int *  sig);
int sigwaitinfo(const sigset_t *  set, siginfo_t *  info);
int sigtimedwait(const sigset_t *  set, siginfo_t *  info, const struct timespec *  timeout);

pid_t fork();
int daemon(int nochdir, int noclose);
pid_t vfork();

int execve(const char * filename, char * const argv[], char * const envp[]);
int execv(const char * path, char * const argv[]);
int execvp(const char * filename, char * const argv[]);
int execvpe(const char * filename, char * const argv[], char * const envp[]);
int fexecve(int fd, char * const argv[], char * const envp[]);
int execl(const char * path, const char * arg, ...);
int execlp(const char * file, const char * arg, ...);
int execle(const char * path, const char * arg, ...);
int system(const char * line);

void exit(int status);
int close(int fd);
int fclose(FILE * fp);
int closedir(DIR * dir);
int dup2(int oldfd, int newfd);
int pipe(int fds[2]);
int pipe2(int fds[2], int flags);
pid_t wait(__WAIT_STATUS stat_loc);
pid_t waitpid(pid_t pid, int * stat_loc, int options);
pid_t wait3(__WAIT_STATUS status, int options, struct rusage * rusage);
pid_t wait4(pid_t pid, __WAIT_STATUS status, int options, struct rusage * rusage);
int waitid(idtype_t idtype, id_t id, siginfo_t * infop, int options);
long syscall(long sys_num, ...);

FILE *  popen(const char * command, const char * mode);
int pclose(FILE * fp);

void openlog(const char * ident, int option, int facility);
void closelog(void);

int __clone(int (* fn)(void * arg), void * child_stack, int flags, void * arg, int * parent_tidptr, struct user_desc * newtls, int * child_tidptr);
int pthread_create(pthread_t * thread, const pthread_attr_t * attr, void * (* start_routine)(void *), void * arg)
void pthread_exit(void * retval);
int pthread_join(pthread_t thread, void * * retval);
int pthread_tryjoin_np(pthread_t thread, void * * retval);
int pthread_timedjoin_np(pthread_t thread, void * * retval, const struct timespec * abstime)
